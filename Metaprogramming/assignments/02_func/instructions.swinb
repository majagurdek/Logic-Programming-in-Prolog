<div class="notebook">

<div class="nb-cell markdown" name="md1">
# Metaprogramming a Functional Language
</div>

<div class="nb-cell markdown" name="md2">
The goal of today's exercise will be to implement basic (and useful) functional programming techniques in Prolog. The potential gains are twofold:

    1. We will practice metaprogramming.
    2. We will understand functional programming.
</div>

<div class="nb-cell markdown" name="md17">
All the tasks below should be performed in a local environment or using [an on-line compiler](https://dev.swi-prolog.org/wasm/shell).
</div>

<div class="nb-cell markdown" name="md3">
## Predicate vs Function
</div>

<div class="nb-cell markdown" name="md4">
There is a fundamental difference between functional programming and logic programming — the former uses functions, while the latter uses predicates.

Functions return a result, while predicates may or may not hold for given arguments. The effect is that in Prolog, there is no clear distinction between the input and output of a predicate. In functions, on the other hand, all input arguments must have specified values.

### Step 1 - Converting a Predicate into a Function

In Prolog, a predicate is specified as `name/number_of_arguments`, for example, `length/2` is a two-argument predicate named `length`.

Let's agree that we will write functions as `name/number_of_arguments/output_argument_index`. For example, `length/2/2` will be a function named length with two arguments, and the second argument will be the output.
</div>

<div class="nb-cell markdown" name="md5">
### Assignment 1. ``func_call``
</div>

<div class="nb-cell markdown" name="md6">
Write a meta-predicate `func_call/3` that:

    1. takes the function specification as the first argument, e.g., `length/2/2`
    2. takes a list of input arguments as the second argument
    3. takes a variable to store the result of the function as the third argument.

#### Hints:

    - `nth0/4` and `nth1/4` can be used to place elements in lists — it's worth checking their documentation.
</div>

<div class="nb-cell program" data-background="true" name="p1">

</div>

<div class="nb-cell markdown" name="md7">
Some queries to test the predicate:
</div>

<div class="nb-cell query" name="q1">
func_call(length/2/2, [[1,2,3]], X)
</div>

<div class="nb-cell query" name="q2">
func_call(append/3/2, [[1,2],[1,2,3,4]], X)
</div>

<div class="nb-cell markdown" name="md9">
### Assignment 2. Default Values
</div>

<div class="nb-cell markdown" name="md10">
Create an additional definition of _func_call/3_, assuming that the *last* argument is the output:
</div>

<div class="nb-cell query" name="q4">
func_call(length/2, [[1,2,3]], X)
</div>

<div class="nb-cell query" name="q5">
func_call(append/3, [[1,2],[3,4]], X)
</div>

<div class="nb-cell markdown" name="md8">
### Assignment 3. Polishing the Syntax
</div>

<div class="nb-cell markdown" name="md13">
In our functional language, we lack a nice functional syntax; manually writing `func_call` seems tiresome. Please define two operators::

    1. the binary result assignment operator =|&lt;#|=
        - you can take inspiration from the definition of the built-in operator `is/2`, which you can find in the documentation for `op/2`
    2. the binary application operator `#`
        - this operator must bind more tightly than =|&lt;#|=
</div>

<div class="nb-cell markdown" name="md14">
Then, we have to define a =|&lt;#/2|= *predicate*, applying `func_call` on its arguments. Below there are some tips:
</div>

<div class="nb-cell program" name="p4">
Result &lt;# Function # ArgsChain :- 
    % something is missing here
    .
</div>

<div class="nb-cell markdown" name="md32">
After that, the queries below should work same as corresponding queries from the previous assignment:
</div>

<div class="nb-cell query" name="q3">
X &lt;# length/2 # [[1,2,3]]
</div>

<div class="nb-cell query" name="q8">
X &lt;# append/3 # [[1,2],[3,4]]
</div>

<div class="nb-cell markdown" name="md16">
Let's go one step further and get rid of those extra square brackets. Define the =|#|= operator in such a way that it allows chaining to the right. Then, adjust the definition of the =|&lt;#|= predicate to gather all # arguments into a list, making the following queries possible:
</div>

<div class="nb-cell query" name="q9">
X &lt;# length/2 # [1,2,3]
</div>

<div class="nb-cell query" name="q10">
X &lt;# append/3 # [1,2] # [3,4]
</div>

<div class="nb-cell markdown" name="md31">
Below there is an unfinished definition:
</div>

<div class="nb-cell program" name="p3">
Result &lt;# Function # ArgsChain :- 
	parse_args_chain(ArgsChain, Args), 
	func_call(Function, Args, Result).

parse_args_chain(H # T, [H|TArgs]) :- 
    !, 
	% still some arguments to get
	.
parse_args_chain(H, X) :-
    % the end
    .
</div>

<div class="nb-cell markdown" name="md11">
### Krok 2. Currying
</div>

<div class="nb-cell markdown" name="md15">
Currying is nothing more than decomposing a multi-argument function into multiple single-argument functions. If a function takes 2 arguments (like our function `append/3`), calling it with the first argument should return a new append function where the first argument is already set, and it only waits for the second argument:

In addition to:
==
X &lt;# append/3 # [1,2] # [3,4]
==

We also want to be able to write "temporary" functions:
==
X &lt;# append/3 # [1,2],
Y &lt;# X # [3,4].
==
Here, =|X|= holds a function that appends another list to =|[1,2]|=.
</div>

<div class="nb-cell markdown" name="md18">
### Assignment 4. `curry_call`
</div>

<div class="nb-cell markdown" name="md19">
To implement currying, we need to somehow "store" intermediate functions. To achieve this, let's define the predicate `curry_call`, which, unlike `func_call,` always takes single argument. The argument is then remembered (added to a list of already provided arguments), and:

    1. if the list of arguments already contains all the input arguments of the function, the function is called using `func_call`
    2. if there are still missing arguments, we return the term `function(FunctionName, ArgumentList)`.
</div>

<div class="nb-cell markdown" name="md20">
In example:
==
X &lt;# append/3 # [1,2],
Y &lt;# X # [3,4].
==
=X= should equal ``function(append/3, [[1,2]])``, and ``Y`` be the result `[1,2,3,4]`.
</div>

<div class="nb-cell markdown" name="md21">
*Task(: Define the predicate `curry_call/3` with the following arguments:

    1. the function, e.g., `function(append/3/3, [])`, where the second argument is the list of remembered input arguments of the function - initially an empty list.
    2. a single input argument
    3. the result:
        - if the list of arguments, after adding the new argument, has a length equal to the number of input arguments of the function, the result is the result of `func_call/3`
        - if the new list of arguments is still too short, we return a new function
</div>

<div class="nb-cell markdown" name="md22">
An example call:
</div>

<div class="nb-cell query" name="q11">
curry_call(function(append/3/3, []), [1,2], X),
curry_call(X, [3,4], Y).
</div>

<div class="nb-cell markdown" name="md25">
As with the `func_call`, we should also support a default output index, e.g., handle the =|append/3|= the same as =|append/3/3|=.
</div>

<div class="nb-cell markdown" name="md23">
### Assignment 5. The Syntactic Sugar.
</div>

<div class="nb-cell markdown" name="md24">
The goal is straightforward, instead of using =|curry_call|= explicitly, we want to write: 
</div>

<div class="nb-cell query" name="q12">
X &lt;# append/3 # [1,2] # [3,4].
</div>

<div class="nb-cell markdown" name="md27">
or:
</div>

<div class="nb-cell query" name="q13">
X &lt;# append/3 # [1,2], 
Y &lt;# X # [3,4].
</div>

<div class="nb-cell markdown" name="md26">
*Required changes:*
</div>

<div class="nb-cell markdown" name="md28">
    1. Each =|#|= operator now corresponds to a single `curry_call`.
    2. The =|&lt;#|= operator's task is to provide a function with an empty number of arguments (e.g., `function(append/3, [])`) as the argument to the first `curry_call`... Unless the function contains already saved arguments, in which case they should be passed instead of an empty list. Finally, the operator should capture the result of the last `curry_call` to the variable on the left (e.g., =|X|=).
</div>

<div class="nb-cell markdown" name="md29">
The following unfinished code is a good point to start:
</div>

<div class="nb-cell program" name="p2">
Result &lt;# Function # ArgsChain :-
    initial_function(Function, IF),
    curry(IF, ArgsChain, Result).

initial_function(function(F,A), function(F,A)) :-
    % the function already has some arguments saved
    !.
initial_function(F, function(F, [])).
                    
curry(F, A # T, Result) :-
    !,
    % There are still arguments to process    
    .
curry(F, A, Result) :-
    % We have reached the end
    .
</div>

<div class="nb-cell markdown" name="md33">
#### Assignment 6. Nesting
</div>

<div class="nb-cell markdown" name="md34">
Please define a **unary** **prefix** operator =|#|= that will be used for nesting calls.

The following query:
</div>

<div class="nb-cell query" name="q14">
X &lt;# append/3 # #(append/3 # [1] # [2]) # #(append/3 # [3] # [4]).
</div>

<div class="nb-cell markdown" name="md35">
Should return the same result as:
</div>

<div class="nb-cell query" name="q15">
X &lt;# append/3 # [1,2] # [3,4]
</div>

<div class="nb-cell markdown" name="md36">
In addition to adding a new operator, it will be necessary to modify the =|curry|= predicate to check if =|A|= is not equal to some =|#(OtherFunction # OtherArgs)|=. In that case, it should recursively execute on =|OtherFunction # OtherArgs|= and pass the result as an argument to =|F|=.
</div>

<div class="nb-cell markdown" name="md37">
Another example, why it could be useful:
</div>

<div class="nb-cell query" name="q16">
X &lt;# length/2 # #(append/3 # [1,2] # [2,3])
</div>

</div>
